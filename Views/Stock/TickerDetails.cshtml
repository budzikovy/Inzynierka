@model Inz_Fn.Models.TickerDetailsPrice
@{
    ViewData["Title"] = "Ticker Details";
}
<style>
    body {
        font-family: Arial;
    }

    /* Style the tab */
    .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: #f1f1f1;
    }

        /* Style the buttons inside the tab */
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-size: 17px;
        }

            /* Change background color of buttons on hover */
            .tab button:hover {
                background-color: #ddd;
            }

            /* Create an active/current tablink class */
            .tab button.active {
                background-color: #ccc;
            }

    /* Style the tab content */
    .tabcontent {
        display: none;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-top: none;
    }

    /* Style the close button */
    .topright {
        float: right;
        cursor: pointer;
        font-size: 28px;
    }

        .topright:hover {
            color: red;
        }
</style>
<h1>@ViewData["Title"]</h1>
<div>
    <h4>TickDetails</h4>
    <hr />
    @if (Model.tickDetails.branding != null)
    {
        <img src="@Model.tickDetails.branding.logo_url" alt="Logo" />
    }
    

    <dl class="row">
        <dt class="col-sm-2">
            Active
        </dt>
        <dd class="col-sm-10">
            @Model.tickDetails.active
        </dd>
        <dt class="col-sm-2">
            CIK
        </dt>
        <dd class="col-sm-10">
            @Model.tickDetails.cik
        </dd>
        <dt class="col-sm-2">
            Composite FIGI
        </dt>
        <dd class="col-sm-10">
            @Model.tickDetails.composite_figi
        </dd>
        <dt class="col-sm-2">
            Address
        </dt>
        <dd class="col-sm-10">
            @if (Model.tickDetails.address != null)
            {
                @Model.tickDetails.address.address1 @Model.tickDetails.address.city @Model.tickDetails.address.postal_code @Model.tickDetails.address.state
            }
            else
            {
                <p>Brak danych</p>
            }
        </dd>
        <dt class="col-sm-2">
            Cena zamknięcia 
        </dt>
        <dd class="col-sm-10">
            @Model.tickerPrevClose.c
        </dd>
        <form asp-action="PurchaseStock" method="post">
            <input type="hidden" name="Stock_CIK" value="@Model.tickDetails.ticker" />
            <input type="hidden" name="Price_per_stock" value="@Model.tickerPrevClose.c" />
            <button type="submit" class="btn btn-primary">Kup teraz</button>
        </form>
    </dl>

    
</div>
<div class="tab">
    <button class="tablinks" onclick="changeView(event, 'Hour')" id="defaultOpen">Hour</button>
    <button class="tablinks" onclick="changeView(event, 'Minute')">Minute</button>
</div>
<div id="Hour" class="tabcontent">
    <span onclick="this.parentElement.style.display='none'" class="topright">&times</span>
    <button id="toggleChartType" type="button">Toggle Chart Type</button>

    <div id="stockChartContainer" style="height: 400px; min-width: 310px"></div>
    
</div>

<div id="Minute" class="tabcontent">
    <span onclick="this.parentElement.style.display='none'" class="topright">&times</span>
    <button id="toggleChartType2" type="button">Toggle Chart Type</button>

    <div id="stockChartContainer2" style="height: 400px; min-width: 310px"></div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
<script type="text/javascript">
    $(function () {
        var data = @Html.Raw(Json.Serialize(Model.stockModels));
        var ohlc = [], volume = [];

        for (var i = 0; i < data.length; i++) {
            ohlc.push([
                data[i].t,
                data[i].o,
                data[i].h,
                data[i].l,
                data[i].c
            ]);

            volume.push([
                data[i].t,
                data[i].v
            ]);
        }

        var chart = Highcharts.stockChart('stockChartContainer', {
            rangeSelector: {
                selected: 1
            },

            title: {
                text: 'Hour stock prices'
            },

            yAxis: [{
                labels: {
                    align: 'right',
                    x: -3
                },
                title: {
                    text: 'OHLC'
                },
                height: '60%',
                lineWidth: 2
            }, {
                labels: {
                    align: 'right',
                    x: -3
                },
                title: {
                    text: 'Volume'
                },
                top: '65%',
                height: '35%',
                offset: 0,
                lineWidth: 2
            }],

            series: [{
                type: 'candlestick',
                name: 'Stock Price',
                data: ohlc
            }, {
                type: 'column',
                name: 'Volume',
                data: volume,
                yAxis: 1
            }]
        });

        $('#toggleChartType').click(function () {
            var series = chart.series[0];
            if (series.type === 'candlestick') {
                series.update({
                    type: 'line'
                });
            } else {
                series.update({
                    type: 'candlestick'
                });
            }
        });
    });$(function () {
        var data = @Html.Raw(Json.Serialize(Model.stockModels2));
        var ohlc = [], volume = [];

        for (var i = 0; i < data.length; i++) {
            ohlc.push([
                data[i].t,
                data[i].o,
                data[i].h,
                data[i].l,
                data[i].c
            ]);

            volume.push([
                data[i].t,
                data[i].v
            ]);
        }

        var chart = Highcharts.stockChart('stockChartContainer2', {
            rangeSelector: {
                buttons: [{
                    type: 'minute',
                    count: 15,
                    text: '15m'
                }, {
                    type: 'minute',
                    count: 30,
                    text: '30m'
                }, {
                    type: 'hour',
                    count: 1,
                    text: '1h'
                }, {
                    type: 'hour',
                    count: 3,
                    text: '3h'
                }, {
                    type: 'day',
                    count: 1,
                    text: '1d'
                }, {
                    type: 'all',
                    text: 'All'
                }]
            },

            title: {
                text: 'Minute stock prices'
            },

            yAxis: [{
                labels: {
                    align: 'right',
                    x: -3
                },
                title: {
                    text: 'OHLC'
                },
                height: '60%',
                lineWidth: 2
            }, {
                labels: {
                    align: 'right',
                    x: -3
                },
                title: {
                    text: 'Volume'
                },
                top: '65%',
                height: '35%',
                offset: 0,
                lineWidth: 2
            }],

            series: [{
                type: 'candlestick',
                name: 'Stock Price',
                data: ohlc
            }, {
                type: 'column',
                name: 'Volume',
                data: volume,
                yAxis: 1
            }]
        });

        $('#toggleChartType2').click(function () {
            var series = chart.series[0];
            if (series.type === 'candlestick') {
                series.update({
                    type: 'line'
                });
            } else {
                series.update({
                    type: 'candlestick'
                });
            }
        });
    });
    function changeView(evt, action) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(action).style.display = "block";
        evt.currentTarget.className += " active";
    }

    // Get the element with id="defaultOpen" and click on it
    document.getElementById("defaultOpen").click();
</script>